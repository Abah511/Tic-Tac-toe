# -*- coding: utf-8 -*-
"""Tic-Tac-Toe .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UU0cAa5on9Os9yXSZ-TlagQFU0zeLZlX
"""

# Tic-Tac-Toe (2-player)
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_win(board, player):
    # Rows, Columns & Diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]) or \
           all([board[j][i] == player for j in range(3)]):
            return True
    if board[0][0] == board[1][1] == board[2][2] == player or \
       board[0][2] == board[1][1] == board[2][0] == player:
        return Truea
    return False

def is_full(board):
    return all(cell in ['X', 'O'] for row in board for cell in row)

board = [["1", "2", "3"], ["4", "5", "6"], ["7", "8", "9"]]
current_player = "X"

while True:
    print_board(board)
    move = input(f"Player {current_player}, enter a number (1-9): ")
    valid = False

    for i in range(3):
        for j in range(3):
            if board[i][j] == move:
                board[i][j] = current_player
                valid = True

    if not valid:
        print("Invalid move. Try again.")
        continue

    if check_win(board, current_player):
        print_board(board)
        print(f"Player {current_player} wins! üéâ")
        break
    elif is_full(board):
        print_board(board)
        print("It's a draw! ü§ù")
        break

    current_player = "O" if current_player == "X" else "X"

import random

words = ["python", "machine", "learning", "hangman", "colab", "notebook"]
word = random.choice(words)
guessed = ["_"] * len(word)
tries = 6
guessed_letters = []

print("üéØ Let's play Hangman!")

while tries > 0 and "_" in guessed:
    print("\nWord:", " ".join(guessed))
    print(f"Tries left: {tries}")
    guess = input("Guess a letter: ").lower()

    if guess in guessed_letters:
        print("You already guessed that letter.")
        continue
    guessed_letters.append(guess)

    if guess in word:
        for i, letter in enumerate(word):
            if letter == guess:
                guessed[i] = guess
    else:
        tries -= 1
        print("Wrong guess!")

if "_" not in guessed:
    print(f"\nüéâ You guessed the word: {word}!")
else:
    print(f"\nüíÄ Game over! The word was: {word}")

!pip install gradio --quiet

import gradio as gr

# Menu items and prices
menu = {
    "Burger": 300,
    "Fries": 150,
    "Pizza": 500,
    "Cola": 100,
    "Ice Cream": 120
}

def calculate_total(burger, fries, pizza, cola, ice_cream):
    quantities = {
        "Burger": burger,
        "Fries": fries,
        "Pizza": pizza,
        "Cola": cola,
        "Ice Cream": ice_cream
    }

    total = 0
    summary = ""

    for item, qty in quantities.items():
        if qty > 0:
            price = menu[item]
            subtotal = qty * price
            summary += f"{item}: {qty} x Rs {price} = Rs {subtotal}\n"
            total += subtotal

    if total == 0:
        return "üõí Please select at least one item."

    summary += f"\nTotal Amount: Rs {total}"
    return summary

# Gradio Interface
iface = gr.Interface(
    fn=calculate_total,
    inputs=[
        gr.Number(label="Burger Qty", value=0),
        gr.Number(label="Fries Qty", value=0),
        gr.Number(label="Pizza Qty", value=0),
        gr.Number(label="Cola Qty", value=0),
        gr.Number(label="Ice Cream Qty", value=0),
    ],
    outputs="text",
    title="üçü Fast Food Cart",
    description="Enter quantities to get your bill",
    allow_flagging="never"
)

iface.launch()